{
	"name": "Regression - Flight Delays",
	"properties": {
		"folder": {
			"name": "regression"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "d5900baf-4775-4802-92ce-481b21d12057"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"source": [
					"## Regression - Flight Delays\n",
					"\n",
					"In this example, we run a linear regression on the *Flight Delay* dataset to predict the delay times.\n",
					"\n",
					"We demonstrate how to use the `TrainRegressor` and the `ComputePerInstanceStatistics` APIs.\n",
					"\n",
					"First, import the packages."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"import os\n",
					"if os.environ.get(\"AZURE_SERVICE\", None) == \"Microsoft.ProjectArcadia\":\n",
					"    from pyspark.sql import SparkSession\n",
					"    spark = SparkSession.builder.getOrCreate()"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"import numpy as np\n",
					"import pandas as pd\n",
					"import synapse.ml"
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"Next, import the CSV dataset."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"flightDelay = spark.read.parquet(\"wasbs://publicwasb@mmlspark.blob.core.windows.net/On_Time_Performance_2012_9.parquet\")\n",
					"# print some basic info\n",
					"print(\"records read: \" + str(flightDelay.count()))\n",
					"print(\"Schema: \")\n",
					"flightDelay.printSchema()\n",
					"flightDelay.limit(10).toPandas()"
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"Split the dataset into train and test sets."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"train,test = flightDelay.randomSplit([0.75, 0.25])"
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"Train a regressor on dataset with `l-bfgs`."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from synapse.ml.train import TrainRegressor, TrainedRegressorModel\n",
					"from pyspark.ml.regression import LinearRegression\n",
					"from pyspark.ml.feature import StringIndexer\n",
					"# Convert columns to categorical\n",
					"catCols = [\"Carrier\", \"DepTimeBlk\", \"ArrTimeBlk\"]\n",
					"trainCat = train\n",
					"testCat = test\n",
					"for catCol in catCols:\n",
					"    simodel = StringIndexer(inputCol=catCol, outputCol=catCol + \"Tmp\").fit(train)\n",
					"    trainCat = simodel.transform(trainCat).drop(catCol).withColumnRenamed(catCol + \"Tmp\", catCol)\n",
					"    testCat = simodel.transform(testCat).drop(catCol).withColumnRenamed(catCol + \"Tmp\", catCol)\n",
					"lr = LinearRegression().setRegParam(0.1).setElasticNetParam(0.3)\n",
					"model = TrainRegressor(model=lr, labelCol=\"ArrDelay\").fit(trainCat)"
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"Save, load, or Score the regressor on the test data."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"if os.environ.get(\"AZURE_SERVICE\", None) == \"Microsoft.ProjectArcadia\":\n",
					"    model_name = \"/models/flightDelayModel.mml\"\n",
					"else:\n",
					"    model_name = \"dbfs:/flightDelayModel.mml\"\n",
					"\n",
					"model.write().overwrite().save(model_name)\n",
					"flightDelayModel = TrainedRegressorModel.load(model_name)\n",
					"\n",
					"scoredData = flightDelayModel.transform(testCat)\n",
					"scoredData.limit(10).toPandas()"
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"Compute model metrics against the entire scored dataset"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from synapse.ml.train import ComputeModelStatistics\n",
					"metrics = ComputeModelStatistics().transform(scoredData)\n",
					"metrics.toPandas()"
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"Finally, compute and show per-instance statistics, demonstrating the usage\n",
					"of `ComputePerInstanceStatistics`."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from synapse.ml.train import ComputePerInstanceStatistics\n",
					"evalPerInstance = ComputePerInstanceStatistics().transform(scoredData)\n",
					"evalPerInstance.select(\"ArrDelay\", \"prediction\", \"L1_loss\", \"L2_loss\").limit(10).toPandas()"
				]
			}
		]
	}
}
{
	"name": "Classification - Adult Census",
	"properties": {
		"folder": {
			"name": "classification"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "synapsemlpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "5575bd44-42c1-49cb-a763-e3e01b6df55b"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/61691a9f-545c-41c4-baf2-d901d60ef9aa/resourceGroups/cgmsynapsetest/providers/Microsoft.Synapse/workspaces/cgmsynapsetest/bigDataPools/synapsemlpool",
				"name": "synapsemlpool",
				"type": "Spark",
				"endpoint": "https://cgmsynapsetest.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/synapsemlpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"source": [
					"## Classification - Adult Census\n",
					"\n",
					"In this example, we try to predict incomes from the *Adult Census* dataset.\n",
					"\n",
					"First, we import the packages (use `help(synapse)` to view contents),"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%%configure -f\r\n",
					"{\r\n",
					"  \"name\": \"synapseml\",\r\n",
					"  \"conf\": {\r\n",
					"      \"spark.jars.packages\": \"com.microsoft.azure:synapseml_2.12:0.9.5-13-d1b51517-SNAPSHOT\",\r\n",
					"      \"spark.jars.repositories\": \"https://mmlspark.azureedge.net/maven\",\r\n",
					"      \"spark.jars.excludes\": \"org.scala-lang:scala-reflect,org.apache.spark:spark-tags_2.12,org.scalactic:scalactic_2.12,org.scalatest:scalatest_2.12\",\r\n",
					"      \"spark.yarn.user.classpath.first\": \"true\"\r\n",
					"  }\r\n",
					"}"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"import os\n",
					"if os.environ.get(\"AZURE_SERVICE\", None) == \"Microsoft.ProjectArcadia\":\n",
					"    from pyspark.sql import SparkSession\n",
					"    spark = SparkSession.builder.getOrCreate()"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"source": [
					"import numpy as np\n",
					"import pandas as pd"
				],
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"source": [
					"Now let's read the data and split it to train and test sets:"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"data = spark.read.parquet(\"wasbs://publicwasb@mmlspark.blob.core.windows.net/AdultCensusIncome.parquet\")\n",
					"data = data.select([\"education\", \"marital-status\", \"hours-per-week\", \"income\"])\n",
					"train, test = data.randomSplit([0.75, 0.25], seed=123)\n",
					"train.limit(10).toPandas()"
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"source": [
					"`TrainClassifier` can be used to initialize and fit a model, it wraps SparkML classifiers.\n",
					"You can use `help(synapse.ml.train.TrainClassifier)` to view the different parameters.\n",
					"\n",
					"Note that it implicitly converts the data into the format expected by the algorithm: tokenize\n",
					"and hash strings, one-hot encodes categorical variables, assembles the features into a vector\n",
					"and so on.  The parameter `numFeatures` controls the number of hashed features."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from synapse.ml.train import TrainClassifier\n",
					"from pyspark.ml.classification import LogisticRegression\n",
					"model = TrainClassifier(model=LogisticRegression(), labelCol=\"income\", numFeatures=256).fit(train)"
				],
				"execution_count": 5
			},
			{
				"cell_type": "markdown",
				"source": [
					"Finally, we save the model so it can be used in a scoring program."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Specify the name of the storage account that is associated with Synapse\r\n",
					"storageAccountName = \"cgmsynapsetest\"\r\n",
					"#Specify the container you created in Storage account, you could also initialize a new name here, and Synapse will help you create that container automatically.\r\n",
					"containerName = \"default\"\r\n",
					"\r\n",
					"filePath = \"abfss://\" + containerName + \"@\" + storageAccountName + \".dfs.core.windows.net/models/AdultCensus.mml\""
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"source": [
					"if os.environ.get(\"AZURE_SERVICE\", None) != \"Microsoft.ProjectArcadia\":\n",
					"    model.write().overwrite().save(\"dbfs:/AdultCensus.mml\")\n",
					"else:\n",
					"    model.write().overwrite().save(filePath)"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				]
			}
		]
	}
}
{
	"name": "CognitiveServices - Celebrity Quote Analysis",
	"properties": {
		"folder": {
			"name": "cognitive_services"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "synapsemlpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "d0adf898-43d1-44b7-81e1-652ff72b1b65"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/61691a9f-545c-41c4-baf2-d901d60ef9aa/resourceGroups/cgmsynapsetest/providers/Microsoft.Synapse/workspaces/cgmsynapsetest/bigDataPools/synapsemlpool",
				"name": "synapsemlpool",
				"type": "Spark",
				"endpoint": "https://cgmsynapsetest.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/synapsemlpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"source": [
					"# Celebrity Quote Analysis with The Cognitive Services on Spark"
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"<img src=\"https://mmlspark.blob.core.windows.net/graphics/SparkSummit2/cog_services.png\" width=\"800\" style=\"float: center;\"/>"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%%configure -f\r\n",
					"{\r\n",
					"  \"name\": \"synapseml\",\r\n",
					"  \"conf\": {\r\n",
					"      \"spark.jars.packages\": \"com.microsoft.azure:synapseml_2.12:0.9.5-13-d1b51517-SNAPSHOT\",\r\n",
					"      \"spark.jars.repositories\": \"https://mmlspark.azureedge.net/maven\",\r\n",
					"      \"spark.jars.excludes\": \"org.scala-lang:scala-reflect,org.apache.spark:spark-tags_2.12,org.scalactic:scalactic_2.12,org.scalatest:scalatest_2.12\",\r\n",
					"      \"spark.yarn.user.classpath.first\": \"true\"\r\n",
					"  }\r\n",
					"}"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#set the name of your key vault\r\n",
					"keyVaultName = \"cgmsynapsevault\"\r\n",
					"#name of your cog services key secret\r\n",
					"cogsvcsSecretName = \"cogsvcskey\"\r\n",
					"bingSecretName = \"bingkey\"\r\n",
					"#set the region where you cognitive service is deployed\r\n",
					"serviceLocation = \"eastus2\""
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": true
				},
				"source": [
					"from synapse.ml.cognitive import *\n",
					"from pyspark.ml import PipelineModel\n",
					"from pyspark.sql.functions import col, udf\n",
					"from pyspark.ml.feature import SQLTransformer\n",
					"import os\n",
					"\n",
					"if os.environ.get(\"AZURE_SERVICE\", None) == \"Microsoft.ProjectArcadia\":\n",
					"    from pyspark.sql import SparkSession\n",
					"    spark = SparkSession.builder.getOrCreate()\n",
					"    from notebookutils.mssparkutils.credentials import getSecret\n",
					"    os.environ['VISION_API_KEY'] = getSecret(keyVaultName, cogsvcsSecretName)\n",
					"    os.environ['TEXT_API_KEY'] = getSecret(keyVaultName, cogsvcsSecretName)\n",
					"    os.environ['BING_IMAGE_SEARCH_KEY'] = getSecret(keyVaultName, bingSecretName)\n",
					"\n",
					"#put your service keys here\n",
					"TEXT_API_KEY          = os.environ[\"TEXT_API_KEY\"]\n",
					"VISION_API_KEY        = os.environ[\"VISION_API_KEY\"]\n",
					"BING_IMAGE_SEARCH_KEY = os.environ[\"BING_IMAGE_SEARCH_KEY\"]"
				],
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Extracting celebrity quote images using Bing Image Search on Spark\n",
					"\n",
					"Here we define two Transformers to extract celebrity quote images.\n",
					"\n",
					"<img src=\"https://mmlspark.blob.core.windows.net/graphics/Cog%20Service%20NB/step%201.png\" width=\"600\" style=\"float: center;\"/>"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": true
				},
				"source": [
					"imgsPerBatch = 10 #the number of images Bing will return for each query\n",
					"offsets = [(i*imgsPerBatch,) for i in range(100)] # A list of offsets, used to page into the search results\n",
					"bingParameters = spark.createDataFrame(offsets, [\"offset\"])\n",
					"\n",
					"bingSearch = BingImageSearch()\\\n",
					"  .setSubscriptionKey(BING_IMAGE_SEARCH_KEY)\\\n",
					"  .setOffsetCol(\"offset\")\\\n",
					"  .setQuery(\"celebrity quotes\")\\\n",
					"  .setCount(imgsPerBatch)\\\n",
					"  .setOutputCol(\"images\")\n",
					"\n",
					"#Transformer to that extracts and flattens the richly structured output of Bing Image Search into a simple URL column\n",
					"getUrls = BingImageSearch.getUrlTransformer(\"images\", \"url\")"
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Recognizing Images of Celebrities\n",
					"This block identifies the name of the celebrities for each of the images returned by the Bing Image Search.\n",
					"\n",
					"<img src=\"https://mmlspark.blob.core.windows.net/graphics/Cog%20Service%20NB/step%202.png\" width=\"600\" style=\"float: center;\"/>"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": true
				},
				"source": [
					"celebs = RecognizeDomainSpecificContent()\\\n",
					"          .setSubscriptionKey(VISION_API_KEY)\\\n",
					"          .setModel(\"celebrities\")\\\n",
					"          .setUrl(\"https://eastus2.api.cognitive.microsoft.com/vision/v2.0/\")\\\n",
					"          .setImageUrlCol(\"url\")\\\n",
					"          .setOutputCol(\"celebs\")\n",
					"\n",
					"#Extract the first celebrity we see from the structured response\n",
					"firstCeleb = SQLTransformer(statement=\"SELECT *, celebs.result.celebrities[0].name as firstCeleb FROM __THIS__\")"
				],
				"execution_count": 6
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Reading the quote from the image.\n",
					"This stage performs OCR on the images to recognize the quotes.\n",
					"\n",
					"<img src=\"https://mmlspark.blob.core.windows.net/graphics/Cog%20Service%20NB/step%203.png\" width=\"600\" style=\"float: center;\"/>"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": true
				},
				"source": [
					"from synapse.ml.stages import UDFTransformer \n",
					"\n",
					"recognizeText = RecognizeText()\\\n",
					"  .setSubscriptionKey(VISION_API_KEY)\\\n",
					"  .setUrl(\"https://eastus2.api.cognitive.microsoft.com/vision/v2.0/recognizeText\")\\\n",
					"  .setImageUrlCol(\"url\")\\\n",
					"  .setMode(\"Printed\")\\\n",
					"  .setOutputCol(\"ocr\")\\\n",
					"  .setConcurrency(5)\n",
					"\n",
					"def getTextFunction(ocrRow):\n",
					"    if ocrRow is None: return None\n",
					"    return \"\\n\".join([line.text for line in ocrRow.recognitionResult.lines])\n",
					"\n",
					"# this transformer wil extract a simpler string from the structured output of recognize text\n",
					"getText = UDFTransformer().setUDF(udf(getTextFunction)).setInputCol(\"ocr\").setOutputCol(\"text\")\n",
					""
				],
				"execution_count": 11
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Understanding the Sentiment of the Quote\n",
					"\n",
					"<img src=\"https://mmlspark.blob.core.windows.net/graphics/Cog%20Service%20NB/step4.jpg\" width=\"600\" style=\"float: center;\"/>"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": true
				},
				"source": [
					"sentimentTransformer = TextSentiment()\\\n",
					"    .setTextCol(\"text\")\\\n",
					"    .setUrl(\"https://eastus2.api.cognitive.microsoft.com/text/analytics/v3.0/sentiment\")\\\n",
					"    .setSubscriptionKey(TEXT_API_KEY)\\\n",
					"    .setOutputCol(\"sentiment\")\n",
					"\n",
					"#Extract the sentiment score from the API response body\n",
					"getSentiment = SQLTransformer(statement=\"SELECT *, sentiment[0].sentiment as sentimentLabel FROM __THIS__\")"
				],
				"execution_count": 12
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Tying it all together\n",
					"\n",
					"Now that we have built the stages of our pipeline its time to chain them together into a single model that can be used to process batches of incoming data\n",
					"\n",
					"<img src=\"https://mmlspark.blob.core.windows.net/graphics/Cog%20Service%20NB/full_pipe_2.jpg\" width=\"800\" style=\"float: center;\"/>"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from synapse.ml.stages import SelectColumns\n",
					"# Select the final coulmns\n",
					"cleanupColumns = SelectColumns().setCols([\"url\", \"firstCeleb\", \"text\", \"sentimentLabel\"])\n",
					"\n",
					"celebrityQuoteAnalysis = PipelineModel(stages=[\n",
					"  bingSearch, getUrls, celebs, firstCeleb, recognizeText, getText, sentimentTransformer, getSentiment, cleanupColumns])\n",
					"\n",
					"celebrityQuoteAnalysis.transform(bingParameters).show(5)"
				],
				"execution_count": 13
			}
		]
	}
}
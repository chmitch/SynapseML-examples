{
	"name": "AzureSearchIndex - Met Artworks",
	"properties": {
		"folder": {
			"name": "other"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "89a99b57-2bea-4548-b09d-21060a57ad82"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"source": [
					"<h1>Creating a searchable Art Database with The MET's open-access collection</h1>"
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"In this example, we show how you can enrich data using Cognitive Skills and write to an Azure Search Index using SynapseML. We use a subset of The MET's open-access collection and enrich it by passing it through 'Describe Image' and a custom 'Image Similarity' skill. The results are then written to a searchable index."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": true
				},
				"source": [
					"import os, sys, time, json, requests\n",
					"from pyspark.ml import Transformer, Estimator, Pipeline\n",
					"from pyspark.ml.feature import SQLTransformer\n",
					"from pyspark.sql.functions import lit, udf, col, split"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"source": [
					"if os.environ.get(\"AZURE_SERVICE\", None) == \"Microsoft.ProjectArcadia\":\n",
					"    from pyspark.sql import SparkSession\n",
					"    spark = SparkSession.builder.getOrCreate()\n",
					"    from notebookutils.mssparkutils.credentials import getSecret\n",
					"    os.environ['VISION_API_KEY'] = getSecret(\"mmlspark-keys\", \"mmlspark-cs-key\")\n",
					"    os.environ['AZURE_SEARCH_KEY'] = getSecret(\"mmlspark-keys\", \"mmlspark-azure-search-key\")"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": true
				},
				"source": [
					"VISION_API_KEY = os.environ['VISION_API_KEY']\n",
					"AZURE_SEARCH_KEY = os.environ['AZURE_SEARCH_KEY']\n",
					"search_service = \"mmlspark-azure-search\"\n",
					"search_index = \"test\""
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": true
				},
				"source": [
					"data = spark.read\\\n",
					"  .format(\"csv\")\\\n",
					"  .option(\"header\", True)\\\n",
					"  .load(\"wasbs://publicwasb@mmlspark.blob.core.windows.net/metartworks_sample.csv\")\\\n",
					"  .withColumn(\"searchAction\", lit(\"upload\"))\\\n",
					"  .withColumn(\"Neighbors\", split(col(\"Neighbors\"), \",\").cast(\"array<string>\"))\\\n",
					"  .withColumn(\"Tags\", split(col(\"Tags\"), \",\").cast(\"array<string>\"))\\\n",
					"  .limit(25)"
				],
				"execution_count": 5
			},
			{
				"cell_type": "markdown",
				"source": [
					"<img src=\"https://mmlspark.blob.core.windows.net/graphics/CognitiveSearchHyperscale/MetArtworkSamples.png\" width=\"800\" style=\"float: center;\"/>"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": true
				},
				"source": [
					"from synapse.ml.cognitive import AnalyzeImage\n",
					"from synapse.ml.stages import SelectColumns\n",
					"\n",
					"#define pipeline\n",
					"describeImage = (AnalyzeImage()\n",
					"  .setSubscriptionKey(VISION_API_KEY)\n",
					"  .setLocation(\"eastus\")\n",
					"  .setImageUrlCol(\"PrimaryImageUrl\")\n",
					"  .setOutputCol(\"RawImageDescription\")\n",
					"  .setErrorCol(\"Errors\")\n",
					"  .setVisualFeatures([\"Categories\", \"Description\", \"Faces\", \"ImageType\", \"Color\", \"Adult\"])\n",
					"  .setConcurrency(5))\n",
					"\n",
					"df2 = describeImage.transform(data)\\\n",
					"  .select(\"*\", \"RawImageDescription.*\").drop(\"Errors\", \"RawImageDescription\")"
				],
				"execution_count": 7
			},
			{
				"cell_type": "markdown",
				"source": [
					"<img src=\"https://mmlspark.blob.core.windows.net/graphics/CognitiveSearchHyperscale/MetArtworksProcessed.png\" width=\"800\" style=\"float: center;\"/>"
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"Before writing the results to a Search Index, you must define a schema which must specify the name, type, and attributes of each field in your index. Refer [Create a basic index in Azure Search](https://docs.microsoft.com/en-us/azure/search/search-what-is-an-index) for more information."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"scrolled": false
				},
				"source": [
					"from synapse.ml.cognitive import *\n",
					"df2.writeToAzureSearch(\n",
					"  subscriptionKey=AZURE_SEARCH_KEY,\n",
					"  actionCol=\"searchAction\",\n",
					"  serviceName=search_service,\n",
					"  indexName=search_index,\n",
					"  keyCol=\"ObjectID\")"
				],
				"execution_count": 10
			},
			{
				"cell_type": "markdown",
				"source": [
					"The Search Index can be queried using the [Azure Search REST API](https://docs.microsoft.com/rest/api/searchservice/) by sending GET or POST requests and specifying query parameters that give the criteria for selecting matching documents. For more information on querying refer [Query your Azure Search index using the REST API](https://docs.microsoft.com/en-us/rest/api/searchservice/Search-Documents)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": true
				},
				"source": [
					"url = 'https://{}.search.windows.net/indexes/{}/docs/search?api-version=2019-05-06'.format(search_service, search_index)\n",
					"requests.post(url, json={\"search\": \"Glass\"}, headers = {\"api-key\": AZURE_SEARCH_KEY}).json()"
				],
				"execution_count": 12
			}
		]
	}
}